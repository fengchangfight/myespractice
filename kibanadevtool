GET _search
{
  "query": {
    "match_all": {}
  }
}

GET /_cat/nodes

GET /_cat/shards

POST /kibana_sample_data_ecommerce/_search
{}

GET /kibana_sample_data_ecommerce

GET /kibana_sample_data_ecommerce/_count

GET /_cat

GET /_cat/indices/kibana*?v&s=index

GET /_cluster/health

GET /_cluster/allocation/explain

POST users/_doc
{
	"user" : "Mike",
    "post_date" : "2019-04-15T14:12:12",
    "message" : "trying out Kibana"
}

PUT users/_doc/1?op_type=create
{
    "user" : "Jack",
    "post_date" : "2019-05-15T14:12:12",
    "message" : "trying out Elasticsearch"
}
'
GET users/_doc/1

PUT users/_doc/1
{
	"user" : "Mike"

}

POST users/_update/1/
{
    "doc":{
        "post_date" : "2019-05-15T14:12:12",
        "message" : "trying out Elasticsearch"
    }
}

POST test2/_search
{}

POST _bulk
{ "index" : { "_index" : "test", "_id" : "1" } }
{ "field1" : "value1" }
{ "delete" : { "_index" : "test", "_id" : "2" } }
{ "create" : { "_index" : "test2", "_id" : "3" } }
{ "field1" : "value3" }
{ "update" : {"_id" : "1", "_index" : "test"} }
{ "doc" : {"field2" : "value2"} }

GET _analyze
{
  "analyzer": "standard",
  "text": "2 running Quick brown-foxes leap over lazy dogs in the summer evening."
}


GET _analyze
{
  "analyzer": "simple",
  "text": "2 running Quick brown-foxes leap over lazy dogs in the summer evening."
}

GET _analyze
{
  "analyzer": "whitespace",
  "text": "2 running Quick brown-foxes leap over lazy dogs in the summer evening."
}

GET _analyze
{
  "analyzer": "keyword",
  "text": "2 running Quick brown-foxes leap over lazy dogs in the summer evening."
}

GET _analyze
{
  "analyzer": "pattern",
  "text": "2 running Quick brown-foxes leap over lazy dogs in the summer evening."
}

GET _analyze
{
  "analyzer": "english",
  "text": "2 running Quick brown-foxes leap over lazy dogs in the summer evening."
}

POST _analyze
{
  "analyzer": "icu_analyzer",
  "text": "他说的确实在理”"
}

GET /movies/_search?q=2012
{
  "profile": "true"
}

GET /movies/_search?q=2012&df=title
{
  "profile": "true"
}

GET /movies/_search?q=title:2012
{
  "profile": "true"
}

GET /movies/_search?q=title:"Beautiful Mind"
{
  "profile": "true"
}

GET /movies/_search?q=title:(Beautiful AND Mind)
{
  "profile": "true"
}

GET /movies/_search?q=title:(Beautiful %2BMind)
{
  "profile": "true"
}

GET /movies/_search?q=year:>=1980
{
  "profile": "true"
}

GET /movies/_search?q=title:"Swamp Thing"
{
  "profile":false
}

POST /kibana_sample_data_ecommerce/_search
{
  "_source":["order_date"],
  "sort":[{"order_date":"desc"}],
  "query":{
    "match_all": {}
  }
}

POST /kibana_sample_data_ecommerce/_search
{
  "script_fields":{
    "new_field":{
      "script":{
        "lang":"painless",
        "source":"doc['order_date'].value+'hello'"
      }
    }
  },
  "from": 10,
  "size": 5,
  "query":{
    "match_all": {}
  }
}

POST movies/_search
{
  "query":{
    "match":{
      "title":"Last Christmas"
    }
  }
}

POST movies/_search
{
  "query":{
    "match":{
      "title":{
        "query":"Last Christmas",
        "operator":"AND"
      }
    }
  }
}

POST movies/_search
{
  "query":{
    "match_phrase":{
      "title":{
        "query":"one love",
        "slop": 1
      }
    }
  }
}

PUT users/_doc/1
{
  "name":"Ruan Yiming",
  "about":"java, golang, node, swift, elasticsearch"
}

PUT users/_doc/2
{
  "name":"Li Yiming",
  "about":"Hadoop"
}

POST users/_search
{
  "query":{
    "query_string": {
      "default_field": "name",
      "query": "Ruan AND Yiming"
    }
  }
}

PUT mapping_test/_doc/1
{
  "firstName":"Chan",
  "lastName": "Jackie",
  "loginDate":"2018-07-24T10:29:48.103Z"
}

GET mapping_test/_mapping

DELETE mapping_test

PUT mapping_test/_doc/1
{
    "uid" : "123",
    "isVip" : false,
    "isAdmin": "true",
    "age":19,
    "heigh":180
}

PUT dynamic_mapping_test/_doc/1
{
  "newField":"someValue"
}

POST dynamic_mapping_test/_search
{
  "query":{
    "match":{
      "newField":"someValue"
    }
  }
}

PUT dynamic_mapping_test/_mapping
{
  "dynamic": false
}

PUT dynamic_mapping_test/_doc/10
{
  "anotherField":"someValue"
}


PUT users
{
    "mappings" : {
      "properties" : {
        "firstName" : {
          "type" : "text"
        },
        "lastName" : {
          "type" : "text"
        },
        "mobile" : {
          "type" : "text",
          "index": false
        }
      }
    }
}

PUT users/_doc/1
{
  "firstName":"Ruan",
  "lastName": "Yiming",
  "mobile": "12345678"
}
   
DELETE users 

PUT users
{
  "mappings": {
    "properties": {
      "firstName":{
        "type": "text",
        "copy_to": "fullName"
      },
      "lastName":{
        "type": "text",
        "copy_to": "fullName"
      }
    }
  }
}

PUT users/_doc/1
{
  "firstName":"Ruan",
  "lastName": "Yiming"
}

GET users/_search?q=fullName:(Ruan Yiming)


POST _analyze
{
  "tokenizer":"keyword",
  "char_filter":["html_strip"],
  "text": "<b>hello world</b>"
}

POST _analyze
{
  "tokenizer": "standard",
  "char_filter": [
      {
        "type" : "mapping",
        "mappings" : [ "- => _"]
      }
    ],
  "text": "123-456, I-test! test-990 650-555-1234"
}

PUT _template/template_default
{
  "index_patterns": ["*"],
  "order" : 0,
  "version": 1,
  "settings": {
    "number_of_shards": 1,
    "number_of_replicas":1
  }
}


GET kibana_sample_data_flights/_search
{
	"size": 0,
	"aggs":{
		"flight_dest":{
			"terms":{
				"field":"DestCountry"
			}
		}
	}
}

GET /_cluster/state

GET /_cluster/state?filter_path=metadata.indices.*.stat*

GET users/_settings?flat_settings=true

GET users/_settings?flat_settings=false

GET _cat/master?v=true

#You can use the cat health API to get the health status of a cluster.
GET /_cat/health

GET /_cat/indices/users

GET /_cat/plugins

GET /_cat/thread_pool?h=pid,node_name,name

GET /_cat/templates

GET /_nodes

GET /_cat/shards?h=i,s,n

GET _cluster/allocation/explain
{
  "index": "users",
  "shard": 0,
  "primary": true,
  "current_node": "N15lnwbZSp-Om-6unxt2qw"
}


# create index
PUT /fc-index-001

# create index with mapping and setting
PUT /test
{
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "properties": {
      "field1": { "type": "text" }
    }
  }
}

POST _aliases
{
  "actions": [
    {
      "add": {
        "index": "test",
        "alias": "testa"
      }
    }
  ]
}

GET /testa

# To get a list of your cluster’s aliases,
GET _alias

# check if an index exist
HEAD testa

HEAD testb

POST testa/_rollover

POST testa/_close

# check if index closed
GET /_cat/indices/testa?v

POST testa/_rollover
{
  "settings": {
    "index.number_of_shards": 2
  }
}

PUT <my-index-{now/d}-000001>

DELETE <my-index-{now/d}-000001> 

PUT %3Cmy-index-%7Bnow%2Fd%7D-000001%3E
{
  "aliases": {
    "my-alias": {
      "is_write_index": true
    }
  }
}

# list all indexes
GET _cat/indices?v

POST my-alias/_rollover
{
  "settings": {
    "index.number_of_shards": 2
  }
}

GET /_resolve/index/test*

# create a mapping at index creation time
PUT /publications
{
  "mappings": {
    "properties": {
      "id": { "type": "text" },
      "title": { "type": "text" },
      "abstract": { "type": "text" },
      "author": {
        "properties": {
          "id": { "type": "text" },
          "name": { "type": "text" }
        }
      }
    }
  }
}

# GET mapping
GET publications/_mapping

# add a field in the mapping, this does not break existing field mappings
PUT /publications/_mapping
{
  "properties": {
    "anotherfield":  { "type": "text"}
  }
}

# =====change mapping of existing field ===start
PUT /my-index-000001
{
  "mappings" : {
    "properties": {
      "user_id": {
        "type": "long"
      }
    }
  }
}

POST /my-index-000001/_doc?refresh=wait_for
{
  "user_id" : 12345
}
POST /my-index-000001/_doc?refresh=wait_for
{
  "user_id" : 12346
}
PUT /my-new-index-000001
{
  "mappings" : {
    "properties": {
      "user_id": {
        "type": "keyword"
      }
    }
  }
}
POST /_reindex
{
  "source": {
    "index": "my-index-000001"
  },
  "dest": {
    "index": "my-new-index-000001"
  }
}
# =====change mapping of existing field ===end

# GET mapping for one field
GET publications/_mapping/field/abstract

# Update exising mapping for existing index?? this has several cases, need to discuss them separately



PUT sampleindex001

# it's ok to use PUT or POST to create alias
PUT sampleindex001/_alias/sa
PUT sampleindex001/_alias/sb
POST sampleindex001/_alias/sc

# list all aliases
GET _alias

DELETE sampleindex001/_aliases/sc

# check alias exist
HEAD _alias/sb

GET sampleindex001/_alias/sb

# can also create alias like this
POST _aliases
{
  "actions": [
    {
      "add": {
        "index": "sampleindex001",
        "alias": "sd"
      }
    }
  ]
}

# analyze text directly
GET /_analyze
{
  "analyzer" : "standard",
  "text" : "Quick Brown Foxes!"
}

GET /_analyze
{
  "analyzer" : "standard",
  "text" : "this is a test"
}

GET /sa/_settings

PUT /_index_template/template_1
{
  "index_patterns" : ["te*"],
  "priority" : 1,
  "template": {
    "settings" : {
      "number_of_shards" : 2
    }
  }
}

PUT _index_template/template_2
{
  "index_patterns" : ["ge*"],
  "template": {
    "settings" : {
        "number_of_shards" : 1
    },
    "aliases" : {
        "alias1" : {}
    }
  }
}

PUT ge1

PUT ge2

GET alias1

POST alias1/_doc/
{
  "@timestamp": "2099-11-15T13:12:00",
  "message": "GET /search HTTP/1.1 200 1070000",
  "user": {
    "id": "kimchy2"
  }
}

GET ge2

GET alias1/_search
{
    "query": {
        "match_all": {}
    }
}

